package com.example.android.p03quizapp;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import org.xmlpull.v1.XmlPullParserException;

import java.io.IOException;
import java.util.ArrayList;


/**
 * Udacity - Android Basics Nanodegree
 * 2. Android Basics: User Input
 * Project: Quiz App
 *
 * Balazs Lengyak balazs.lengyak@gmail.com
 *
 * App to display quiz questions, generate input for user's guesses and provide feedback on correct
 * answers
 *
 * Please note that views are dynamically generated runtime using quiz data taken from XML resource
 * quiz_data.xml. I am aware that this could and should be done using RecyclerViews / ListView with
 * arrayadapter etc., but anyways, here it is.
 */

public class MainActivity extends AppCompatActivity {

    /*
     *  There are dynamically generated views in this layout.
     *  Views have an autosave / restore feature to maintain user input throughout orientation changes etc.
     *  In order for this feature to work, views must have a persistent and unique resource id.
     *
     *  The native View.generateViewId is not suitable as it would provide a continuously increasing Id,
     *  so whenever the views would be regenerated by this activity after orientation change, they
     *  would not receive the same view id again.
     *
     *  So we maintain our own resource ID allocation mechanism. Through experience I found out that
     *  View.generateViewId returns integers beginning with 1 and increasing every time the method is called.
     *  So we do the same, only difference is we _always_ begin from 1 while View.genereateViewId would only
     *  begin from 1 if the App was not restored from saved instance state (started for the first time).
     *
     *  our own generateViewId will increase lastAllocatedViewId beforehand, so the first Id returned will be 1.
     */
    private int lastAllocatedViewId = 0;

    /**
     * method to set up quiz views and handle button
     *
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ArrayList<QuizQuestion> quizQuestions = null;

        //  read quiz data from xml resource quiz_data
        try {
            quizQuestions = QuizXmlParser.parse(this, R.xml.quiz_data);
            Log.d("Main", "QuizQuestions: " + quizQuestions);

        } catch (XmlPullParserException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            quizQuestions = null;
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            quizQuestions = null;
        }

        //  bail out if failed to read quiz XML data
        if (quizQuestions == null) {
            Toast.makeText(this, "1001 Failed to parse Quiz XML, sorry", Toast.LENGTH_LONG).show();
            finish();
        }

        //  find view to contain quiz questions
        LinearLayout container = (LinearLayout) findViewById(R.id.quizQuestionsContainer);

        // dynamically generate views to hold quiz question and input views, add input handlers
        for (int i = 0; i < quizQuestions.size(); i++) {
            setupQuizQuestionView(container, quizQuestions.get(i));
        }

        //  let the user know the app is ready to go, but only if the app is started for the first time;
        //  not when orientation changes or user returns from other activity
        if (savedInstanceState == null)
            Toast.makeText(this, "Gogogo!", Toast.LENGTH_SHORT).show();

        //  Create listener to receive onclick events
        QuizCheckAnswer answerHandler = new QuizCheckAnswer(this, quizQuestions);
        //  find check answer button and assign OnClick and OnLongClick listener we just created
        ImageButton checkAnswerButton = (ImageButton) findViewById(R.id.CheckInputButton);
        checkAnswerButton.setOnClickListener(answerHandler);
        checkAnswerButton.setOnLongClickListener(answerHandler);
    }

    /**
     * method to assemble and add quiz to parent view. will take care of
     * - setting up quiz image and question ("quiz header")
     * - set up EditText, RadioGroup or checkboxes as required
     * - create and assign handler to evaluate user input
     *
     * @param parent         is the parent View
     * @param questionObject is the object containing quiz question, type, answers etc.
     */
    private void setupQuizQuestionView(LinearLayout parent, QuizQuestion questionObject) {
        String logTag = "setupQuizQuestionView";

        Log.d(logTag, "add question to quiz: " + questionObject.getQuestion());
        LayoutInflater inflater = getLayoutInflater();

        //  set up quiz container to hold header and answer input
        LinearLayout quizContainerView = (LinearLayout) inflater.inflate(R.layout.quiz_container, parent, false);

        //  generate persistent and unique id for this view
        int id = this.generateViewId();
        Log.d(logTag, "Created quiz container view and set ID to " + id);
        quizContainerView.setId(id);

        //  register the conatiner view with the QuizQuestion object for future reference
        questionObject.setQuizContainer(quizContainerView);

        //  add quiz header - image and question - to quiz view
        quizContainerView.addView(setupQuizQuestionHeaderView(quizContainerView, questionObject));

        //  add quiz input views matching quiz input type
        View answerView = setupQuizInputView(quizContainerView, questionObject);
        if (answerView == null) {
            //  failsafe. should our XML contain an unknown input type, setupQuizInputView will return null
            Log.e("setupQuizQuestionView", "setupQuizInputView for type "
                    + questionObject.getInputType() + " returned null view");
        } else {
            Log.d("setupQuizQuestionView", "setupQuizInputView returned " + answerView);
            quizContainerView.addView(answerView);
        }

        parent.addView(quizContainerView);
    }

    /**
     * method to assemble a quiz view header - image and question
     *
     * @param parent         is the view containing the current quiz
     * @param questionObject is the quiz object containing type and answers
     * @return the view with quiz header
     */
    private View setupQuizQuestionHeaderView(ViewGroup parent, QuizQuestion questionObject) {
        String logTag = "setupQuizQHeaderView";
        LayoutInflater inflater = getLayoutInflater();
        View quizQuestionHeaderView;

        //  if there is a valid image resource id associated with this QuizQuestion, use it
        if (questionObject.getHeaderImageResId() > 0) {
            // set up question header with image
            quizQuestionHeaderView = inflater.inflate(R.layout.quiz_header, parent, false);
            //  question image
            ImageView quizImageView = (ImageView) quizQuestionHeaderView.findViewById(R.id.quizHeaderImageView);
            quizImageView.setImageResource(questionObject.getHeaderImageResId());
        } else {
            // set up question header without image
            quizQuestionHeaderView = inflater.inflate(R.layout.quiz_header_noimage, parent, false);
        }

        //  generate persistent and unique id for this view
        int id = generateViewId();
        Log.d(logTag, "Created quiz header view and set ID to " + id);
        quizQuestionHeaderView.setId(id);

        //  find TextView to hold the question
        TextView questionView = (TextView) quizQuestionHeaderView.findViewById(R.id.quizQuestionTextView);
        //  update TextView to display question
        questionView.setText(questionObject.getQuestion());

        return quizQuestionHeaderView;
    }

    /**
     * dispatcher for setting up different quizInputViews.
     * Actual work will be done by separate methods depending on input type
     *
     * @param parent         is the parent View
     * @param questionObject is the quiz object containing type and answers
     * @return the view with quiz input view
     */
    private View setupQuizInputView(ViewGroup parent, QuizQuestion questionObject) {
        //  call the appropriate method matching quiz input type
        switch (questionObject.getInputType()) {
            case "EditText":
                return setupQuizInputViewEditText(parent, questionObject);
            case "Checkbox":
                return setupQuizInputViewCheckbox(parent, questionObject);
            case "Radio":
                return setupQuizInputViewRadio(parent, questionObject);
            default:
                return null;
        }
    }

    /**
     * set up EditText view and
     * assign an input handler to be able to check input data in a uniform manner later
     *
     * @param parent         is the parent view
     * @param questionObject is the object holding quiz data
     * @return EditText view
     */
    private View setupQuizInputViewEditText(ViewGroup parent, QuizQuestion questionObject) {
        String logTag = "setupQuizInputVEditText";
        LayoutInflater inflater = getLayoutInflater();
        //  find layout for edittext input
        View quizEditTextView = inflater.inflate(R.layout.quiz_input_edittext, parent, false);
        //  find actual EditText view inside our layout
        View edittext = quizEditTextView.findViewById(R.id.QuizInputEditText);

        //  generate unique ID for EditText
        int id = generateViewId();
        Log.d(logTag, "Created quiz edittext input view and set ID to " + id);
        edittext.setId(id);
        //  create and assign an input handler to EditText
        questionObject.setInputHandler(new QuizInputHandlerEditText(edittext));

        return quizEditTextView;
    }

    /**
     * set up CheckBox view for each possible answer and
     * assign an input handler to be able to check input data in a uniform manner later
     *
     * @param parent is the parent view
     * @param questionObject is the actual QuizQuestion
     * @return checkbox container view with all the checkboxes related to this particular quiz
     */
    private View setupQuizInputViewCheckbox(ViewGroup parent, QuizQuestion questionObject) {
        String logTag = "setupQuizInputCheckboxV";
        LayoutInflater inflater = getLayoutInflater();
        //  first find the container for all the checkboxes that need to be created
        LinearLayout quizCheckboxContainer = (LinearLayout) inflater.inflate(R.layout.quiz_input_checkbox_container, parent, false);
        //  set up arraylist to keep track of all the checkboxes
        ArrayList<CheckBox> checkBoxes = new ArrayList<>();
        //  iterate over all possible answers and create a checkbox for each answer
        for (int i = 0; i < questionObject.getAnswers().size(); i++) {
            //  create checkbox view
            CheckBox checkBox = (CheckBox) inflater.inflate(R.layout.quiz_input_checkbox, quizCheckboxContainer, false);

            //  generate persistent and unique ID for each checkbox
            int id = generateViewId();
            Log.d(logTag, "Created quiz checkbox view and set ID to " + id);
            checkBox.setId(id);
            //  set checkbox text to actual answer
            checkBox.setText(questionObject.getAnswer(i));
            //  add the actual checkbox to our array
            checkBoxes.add(checkBox);
            quizCheckboxContainer.addView(checkBox);
        }

        //  create and assign an input handler to the checkboxes
        questionObject.setInputHandler(new QuizInputHandlerCheckbox(checkBoxes));

        return quizCheckboxContainer;
    }

    /**
     * set up RadioGroup view for each possible answer and
     * assign an input handler to be able to check input data in a uniform manner later
     *
     * @param parent is the parent view
     * @param questionObject is the actual QuizQuestion
     * @return RadioGroup container view with all the RadioButtons related to this particular quiz
     */
    private View setupQuizInputViewRadio(ViewGroup parent, QuizQuestion questionObject) {
        String logTag = "setupQuizInRadioButton";
        LayoutInflater inflater = getLayoutInflater();
        //  first find the container for all the RadioGroup that need to be created
        LinearLayout quizEditRadioContainer = (LinearLayout) inflater.inflate(R.layout.quiz_input_radio_container, parent, false);

        //  find actual RadioGroup view inside our container
        RadioGroup radioGroup = (RadioGroup) quizEditRadioContainer.findViewById(R.id.QuizInputRadioGroup);
        //  generate persistent and unique ID for RadioGroup
        int id = generateViewId();
        Log.d(logTag, "Created quiz radiogroup view and set ID to " + id);
        radioGroup.setId(id);

        //  set up arraylist to hold RadioButton views
        ArrayList<RadioButton> radioButtons = new ArrayList<>();

        //  iterate ovew quiz possible answers and set up a RadioButton for each answer
        for (int i = 0; i < questionObject.getAnswers().size(); i++) {
            //  create a RadioButton
            RadioButton radioButton = (RadioButton) inflater.inflate(R.layout.quiz_input_radiobutton, radioGroup, false);

            //  generate persistent and unique ID for each radiobutton
            id = generateViewId();
            Log.d(logTag, "Created quiz checkbox view and set ID to " + id);
            radioButton.setId(id);

            //  set RadioButton text to actual answer
            radioButton.setText(questionObject.getAnswer(i));
            //  make a note of the actual RadioButton
            radioButtons.add(radioButton);
            //  add RadioButton to RadioGroup
            radioGroup.addView(radioButton);
        }

        //  add an input handler to the current QuizQuestion object
        questionObject.setInputHandler(new QuizInputHandlerRadio(radioButtons));

        Log.d("setupRadioView", "Returning " + quizEditRadioContainer);
        return quizEditRadioContainer;
    }

    /**
     * generate a persisetent and unique View Id
     * @return generated View Id
     */
    private int generateViewId() {
        lastAllocatedViewId++;
        return lastAllocatedViewId;
    }
}
